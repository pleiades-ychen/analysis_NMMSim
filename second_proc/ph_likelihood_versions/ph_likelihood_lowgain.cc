// ph_likelihood function for low-gain settings

#include <iostream>
#include "TMath.h"

double pdf_n(const double);
double pdf_g(const double);

double ph_likelihood(const vector<double> & ph, const string type) {

  double ll = 1.;

  if(type == "n") {
    for (int i = 0; i < ph.size(); i++)
      ll *= pdf_n(ph[i]);
  }
  else if(type == "g") {
    for (int i = 0; i < ph.size(); i++)
      ll *= pdf_g(ph[i]);
  }
  else
    std::cout << "Event type must be \"n\" or \"g\".\n";

  return ll;
}


double pdf_n(double Amp) {
//double pdf_n(double * x, double *par) {
//double Amp = x[0];
  double val[300] = {0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00001796, 0.00166640, 0.00575472, 0.00921697, 0.01196160, 0.01340186, 0.01471190, 0.01596591, 0.01691107, 0.01755245, 0.01869777, 0.01888497, 0.01902122, 0.01949903, 0.01956813, 0.02021372, 0.01933232, 0.01974531, 0.01986557, 0.01968727, 0.01985259, 0.01925612, 0.01927993, 0.01908675, 0.01852025, 0.01824454, 0.01839789, 0.01850448, 0.01847717, 0.01787871, 0.01761145, 0.01708502, 0.01711706, 0.01681440, 0.01633932, 0.01631922, 0.01597744, 0.01535205, 0.01511725, 0.01490118, 0.01463718, 0.01378071, 0.01373286, 0.01342840, 0.01304043, 0.01270355, 0.01216936, 0.01224718, 0.01163995, 0.01141564, 0.01079211, 0.01056502, 0.00960541, 0.00992188, 0.00925894, 0.00881885, 0.00860868, 0.00817338, 0.00788047, 0.00743129, 0.00717222, 0.00706386, 0.00667669, 0.00629963, 0.00579820, 0.00568398, 0.00518877, 0.00506580, 0.00486359, 0.00450893, 0.00458137, 0.00409999, 0.00378698, 0.00369152, 0.00363065, 0.00318275, 0.00310985, 0.00307651, 0.00280523, 0.00267848, 0.00257289, 0.00230070, 0.00212155, 0.00189765, 0.00187954, 0.00169594, 0.00165499, 0.00158640, 0.00151643, 0.00129043, 0.00136324, 0.00109398, 0.00111189, 0.00098031, 0.00096359, 0.00089617, 0.00075548, 0.00077581, 0.00076216, 0.00067264, 0.00057160, 0.00058497, 0.00048388, 0.00048769, 0.00045904, 0.00038785, 0.00033163, 0.00029132, 0.00030767, 0.00027266, 0.00022818, 0.00020988, 0.00023142, 0.00016224, 0.00015908, 0.00021963, 0.00014905, 0.00018378, 0.00015026, 0.00011209, 0.00009835, 0.00010865, 0.00006965, 0.00007884, 0.00010550, 0.00011441, 0.00004699, 0.00007197, 0.00004272, 0.00004638, 0.00006250, 0.00005214, 0.00001347, 0.00002665, 0.00002294, 0.00002006, 0.00002322, 0.00005507, 0.00001662, 0.00002953, 0.00002006, 0.00001319, 0.00001950, 0.00000687, 0.00002294, 0.00000659, 0.00000316, 0.00001978, 0.00001922, 0.00001607, 0.00000659, 0.00000316, 0.00000316, 0.00000631, 0.00000659, 0.00000975, 0.00000659, 0.00000631, 0.00000000, 0.00001319, 0.00000659, 0.00000344, 0.00000316, 0.00000316, 0.00000631, 0.00000000, 0.00000000, 0.00000344, 0.00000344, 0.00000000, 0.00000631, 0.00000000, 0.00000000, 0.00000947, 0.00000000, 0.00001003, 0.00000344, 0.00000344, 0.00000659, 0.00000947, 0.00000631, 0.00000000, 0.00000344, 0.00000344, 0.00000316, 0.00000659, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000344, 0.00000344, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000316, 0.00000344, 0.00000000, 0.00000631, 0.00000000, 0.00000687, 0.00000344, 0.00000000, 0.00000000, 0.00000000, 0.00000344, 0.00000316, 0.00000000, 0.00000659, 0.00000316, 0.00000000, 0.00000000, 0.00000344, 0.00000316, 0.00000000, 0.00000344, 0.00000344, 0.00000000, 0.00000344, 0.00000344, 0.00000344, 0.00000000, 0.00000000, 0.00000316, 0.00000000, 0.00000344, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000316, 0.00000000, 0.00000316, 0.00000000, 0.00000000,};
  int i = (int)TMath::Nint((Amp+1.)/2);
  return val[i];
}

double pdf_g(double Amp) {
//double pdf_g(double *x, double *par) {
//double Amp = x[0];
  double val[300] = {0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00012889, 0.01502993, 0.04443170, 0.06019722, 0.06405628, 0.06863247, 0.06557105, 0.06271315, 0.05899057, 0.05458895, 0.05050498, 0.04822523, 0.04208372, 0.03692373, 0.03434151, 0.03016305, 0.02917783, 0.02609113, 0.02477718, 0.02145700, 0.01796031, 0.01714130, 0.01351767, 0.01383804, 0.01279392, 0.01048152, 0.01085788, 0.00833533, 0.00724260, 0.00583144, 0.00573152, 0.00514968, 0.00442495, 0.00380015, 0.00265144, 0.00284195, 0.00261878, 0.00208923, 0.00188841, 0.00176983, 0.00208359, 0.00076302, 0.00062480, 0.00067243, 0.00103946, 0.00067243, 0.00045295, 0.00053421, 0.00028110, 0.00031474, 0.00040066, 0.00026244, 0.00036236, 0.00022414, 0.00017652, 0.00018118, 0.00018585, 0.00012889, 0.00013822, 0.00004296, 0.00009526, 0.00000000, 0.00000000, 0.00017652, 0.00013822, 0.00004763, 0.00000000, 0.00017652, 0.00004296, 0.00004763, 0.00004763, 0.00000000, 0.00004763, 0.00004296, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00009059, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00004296, 0.00000000, 0.00004763, 0.00004763, 0.00000000, 0.00008593, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00004296, 0.00004296, 0.00000000, 0.00004763, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00004763, 0.00000000, 0.00004763, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000,};

  int i = (int)TMath::Nint((Amp+1.)/2);
  return val[i];
}
